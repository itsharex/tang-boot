package ${packageName}.controller

import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.web.bind.annotation.DeleteMapping
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.PutMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import com.tang.commons.utils.AjaxResult
import com.tang.commons.utils.page.PageResult
import ${packageName}.entity.$ClassName
import ${packageName}.service.${ClassName}Service

/**
 * ${classComment}逻辑控制层
 *
 * @author $author
 */
@RestController
@RequestMapping("/$moduleName/$businessName")
class ${ClassName}Controller(private val ${className}Service: ${ClassName}Service) {

    /**
     * 查询${classComment}列表
     *
     * @param $className ${classComment}对象
     * @return ${classComment}列表
     */
    @PreAuthorize("@auth.hasPermission('$moduleName.replace("/", ":"):$permissionName:list')")
    @GetMapping("/list")
    fun list($className: $ClassName): PageResult {
#foreach ($column in $columnList)
#set($javaField = $column.javaField)
#set($JavaField = $column.javaField.substring(0, 1).toUpperCase() + ${column.javaField.substring(1)})
#if ($column.htmlType == 'checkbox')
        ${className}.${javaField}ListTo${JavaField}()
#end
#end
        return ${className}Service.select${ClassName}List($className)
    }

    /**
     * 通过${classComment}主键查询${classComment}信息
     *
     * @param $primaryKey ${classComment}主键
     * @return ${classComment}信息
     */
    @PreAuthorize("@auth.hasPermission('$moduleName.replace("/", ":"):$permissionName:list')")
    @GetMapping("/{$primaryKey}")
    fun select${ClassName}By${PrimaryKey}(@PathVariable $primaryKey: Long): AjaxResult {
        val $className = ${className}Service.select${ClassName}By${PrimaryKey}($primaryKey)
#foreach ($column in $columnList)
#set($javaField = $column.javaField)
#set($JavaField = $column.javaField.substring(0, 1).toUpperCase() + ${column.javaField.substring(1)})
#if ($column.htmlType == 'checkbox')
        ${className}.${javaField}To${JavaField}List()
#end
#end
        return AjaxResult.success($className)
    }

    /**
     * 新增${classComment}信息
     *
     * @param $className ${classComment}信息
     * @return 影响行数
     */
    @PreAuthorize("@auth.hasPermission('$moduleName.replace("/", ":"):$permissionName:add')")
    @PostMapping
    fun insert${ClassName}(@RequestBody $className: $ClassName): AjaxResult {
#foreach ($column in $columnList)
#set($javaField = $column.javaField)
#set($JavaField = $column.javaField.substring(0, 1).toUpperCase() + ${column.javaField.substring(1)})
#if ($column.htmlType == 'checkbox')
        ${className}.${javaField}ListTo${JavaField}()
#end
#end
        return AjaxResult.rows(${className}Service.insert${ClassName}($className))
    }

    /**
     * 通过${classComment}主键修改${classComment}信息
     *
     * @param $className ${classComment}信息
     * @return 影响行数
     */
    @PreAuthorize("@auth.hasPermission('$moduleName.replace("/", ":"):$permissionName:edit')")
    @PutMapping
    fun update${ClassName}By${PrimaryKey}(@RequestBody $className: $ClassName): AjaxResult {
#foreach ($column in $columnList)
#set($javaField = $column.javaField)
#set($JavaField = $column.javaField.substring(0, 1).toUpperCase() + ${column.javaField.substring(1)})
#if ($column.htmlType == 'checkbox')
        ${className}.${javaField}ListTo${JavaField}()
#end
#end
        return AjaxResult.rows(${className}Service.update${ClassName}By${PrimaryKey}($className))
    }

    /**
     * 通过${classComment}主键删除${classComment}信息
     *
     * @param $primaryKey ${classComment}主键
     * @return 影响行数
     */
    @PreAuthorize("@auth.hasPermission('$moduleName.replace("/", ":"):$permissionName:delete')")
    @DeleteMapping("/{$primaryKey}")
    fun delete${ClassName}By${PrimaryKey}(@PathVariable $primaryKey: Long): AjaxResult {
        return AjaxResult.rows(${className}Service.delete${ClassName}By${PrimaryKey}($primaryKey))
    }

    /**
     * 通过${classComment}主键数组批量删除${classComment}信息
     *
     * @param ${primaryKey}s ${classComment}主键数组
     * @return 影响行数
     */
    @PreAuthorize("@auth.hasPermission('$moduleName.replace("/", ":"):$permissionName:delete')")
    @DeleteMapping
    fun delete${ClassName}By${PrimaryKey}s(@RequestBody ${primaryKey}s: Array<Long>): AjaxResult {
        return AjaxResult.rows(${className}Service.delete${ClassName}By${PrimaryKey}s(${primaryKey}s))
    }

}
