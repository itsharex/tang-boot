package ${packageName}.entity

import java.time.LocalDate
import java.time.LocalDateTime

import org.apache.commons.lang3.StringUtils

import com.fasterxml.jackson.annotation.JsonFormat
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer
import com.tang.commons.base.entity.BaseEntity

/**
 * ${classComment}实体类 $tableName
 *
 * @author $author
 */
class $ClassName: BaseEntity() {

    companion object {
        @JvmStatic private val serialVersionUID = 1L
    }
#foreach ($column in $columnList)
#if (!$column.isSuperField)
#if ($column.htmlType == 'date')

    /**
     * $column.columnComment
     */
    @JsonDeserialize(using = LocalDateDeserializer::class)
    @JsonSerialize(using = LocalDateSerializer::class)
    @JsonFormat(pattern = "yyyy-MM-dd")
    var $column.javaField: $column.javaType? = null
#elseif ($column.htmlType == 'datetime')

    /**
     * $column.columnComment
     */
    @JsonDeserialize(using = LocalDateTimeDeserializer::class)
    @JsonSerialize(using = LocalDateTimeSerializer::class)
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    var $column.javaField: $column.javaType? = null
#else

    /**
     * $column.columnComment
     */
    var $column.javaField: $column.javaType? = null
#if ($column.htmlType == 'checkbox')

    /**
     * ${column.columnComment}集合
     */
    var ${column.javaField}List: List<$column.javaType>? = null
#end
#end
#end
#end
#foreach ($column in $columnList)
#set($javaType = $column.javaType)
#set($javaField = $column.javaField)
#set($JavaField = $column.javaField.substring(0, 1).toUpperCase() + ${column.javaField.substring(1)})
#if (!$column.isSuperField)
#if ($column.htmlType == 'checkbox')

    fun ${javaField}ListTo${JavaField}() {
        if (${javaField}List == null || ${javaField}List.isEmpty()) {
            $javaField = null
            return
        }
        $javaField = ${javaField}List!!.joinToString(",")
    }

    fun ${javaField}To${JavaField}List() {
        if (StringUtils.isBlank($javaField)) {
            ${javaField}List = emptyList()
            return
        }
        ${javaField}List = ${javaField}!!.split(",").toList()
    }
#end
#end
#end

}
