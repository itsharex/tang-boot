<template>
  <div>
    <!-- 信息检索 -->
    <el-card class="mb-10">
      <el-form
        ref="${className}QueryFormRef"
        :model="queryParams"
        inline
      >
#foreach ($column in $columnList)
#if ($column.javaType == 'String')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-input
            v-model="queryParams.$column.javaField"
            placeholder="请输入$column.columnComment"
            @keyup.enter="handleList"
            clearable
          />
        </el-form-item>
#end
#end

        <el-form-item>
          <el-button
            type="primary"
            :icon="Search"
            @click="handleList"
          >搜索</el-button>
          <el-button
            :icon="Refresh"
            @click="resetQuery"
          >重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- ${classComment}数据 -->
    <el-card>

      <!-- ${classComment}操作 -->
      <template #header>
        <el-row>
          <el-button
            type="primary"
            :icon="Plus"
            v-hasPermission="'$moduleName.replace("/", ":"):$permissionName:add'"
            @click="handleAdd"
          >新增</el-button>
          <el-button
            type="success"
            :icon="Edit"
            :disabled="${primaryKey}s.length !== 1"
            v-hasPermission="'system:dict:edit'"
            @click="handleEdit"
          >修改</el-button>
          <el-button
            type="danger"
            :icon="Delete"
            :disabled="${primaryKey}s.length === 0"
            v-hasPermission="'$moduleName.replace("/", ":"):$permissionName:delete'"
            @click="handleDeletes"
          >删除</el-button>
        </el-row>
      </template>

      <!-- ${classComment}表格 -->
      <el-table
        v-loading="loading"
        :data="${className}List"
        row-key="$primaryKey"
        @selection-change="handleSelectionChange"
      >
        <el-table-column type="selection" width="55" />
#foreach ($column in $columnList)
#if ($column.htmlType == 'radio')
        <el-table-column
          prop="$column.javaField"
          label="$column.columnComment"
          align="center"
        >
          <template #default="scope">
            <dict-tag :data="$column.dictType" :value="scope.row.$column.javaField" />
          </template>
        </el-table-column>
#elseif ($column.htmlType == 'checkbox')
#elseif ($column.htmlType == 'select')
        <el-table-column
          prop="$column.javaField"
          label="$column.columnComment"
          align="center"
        >
          <template #default="scope">
            <dict-tag :data="$column.dictType" :value="scope.row.$column.javaField" />
          </template>
        </el-table-column>
#elseif ($column.htmlType == 'image')
#elseif ($column.htmlType == 'file')
#else
        <el-table-column
          prop="$column.javaField"
          label="$column.columnComment"
          align="center"
        />
#end
#end
        <el-table-column
          label="操作"
          width="190"
          align="center"
        >
          <template #default="scope">
            <el-button
              type="primary"
              link
              :icon="Edit"
              size="small"
              v-hasPermission="'$moduleName.replace("/", ":"):$permissionName:edit'"
              @click="handleEdit(scope.row)"
            >修改</el-button>
            <el-button
              type="primary"
              link
              :icon="Delete"
              size="small"
              v-hasPermission="'$moduleName.replace("/", ":"):$permissionName:delete'"
              @click="handleDelete(scope.row)"
            >删除</el-button>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页 -->
      <pagination
        v-if="total > 0"
        :total="total"
        v-model:pageNum="queryParams.pageNum"
        v-model:pageSize="queryParams.pageSize"
        @pagination="handleList"
      />
    </el-card>

    <!-- 添加或修改${classComment}信息对话框 -->
    <el-dialog
      :title="${className}Dialog.title"
      v-model="${className}Dialog.visible"
      @close="close${ClassName}Dialog"
    >
      <el-form
        ref="${className}RuleFormRef"
        :model="${className}Form"
        :rules="${className}Rules"
        label-width="120px"
        status-icon
      >
#foreach ($column in $columnList)
#if ($column.javaField != $primaryKey)
#if ($column.htmlType == 'input')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-input
            v-model="${className}Form.$column.javaField"
            placeholder="请输入$column.columnComment"
          />
        </el-form-item>
#elseif ($column.htmlType == 'textarea')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-input
            type="textarea"
            v-model="${className}Form.$column.javaField"
            placeholder="请输入$column.columnComment"
          />
        </el-form-item>
#elseif ($column.htmlType == 'radio')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-radio-group v-model="${className}Form.$column.javaField">
            <el-radio
              v-for="item in $column.dictType"
              :key="item.dataId"
              :label="item.dataValue"
            >{{ item.dataLabel }}</el-radio>
          </el-radio-group>
        </el-form-item>
#elseif ($column.htmlType == 'checkbox')
        <el-form-item label="$column.columnComment" prop="${column.javaField}List">
          <el-checkbox-group v-model="${className}Form.${column.javaField}List">
            <el-checkbox
              v-for="item in $column.dictType"
              :key="item.dataId"
              :label="item.dataValue"
            >{{ item.dataLabel }}</el-checkbox>
          </el-checkbox-group>
        </el-form-item>
#elseif ($column.htmlType == 'select')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-select
            v-model="${className}Form.$column.javaField"
            placeholder="请选择$column.columnComment"
          >
            <el-option
              v-for="item in $column.dictType"
              :key="item.dataId"
              :value="item.dataValue"
              :label="item.dataLabel"
            />
          </el-select>
        </el-form-item>
#elseif ($column.htmlType == 'date')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-date-picker
            v-model="${className}Form.$column.javaField"
            type="date"
            placeholder="选择${column.columnComment}日期"
            value-format="YYYY-MM-DD"
          />
        </el-form-item>
#elseif ($column.htmlType == 'datetime')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-date-picker
            v-model="${className}Form.$column.javaField"
            type="datetime"
            placeholder="选择${column.columnComment}日期时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>
#elseif ($column.htmlType == 'image')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-upload
            class="avatar-uploader"
            action="/api/upload"
            :show-file-list="false"
            :on-success="handleAvatarSuccess"
            :before-upload="beforeAvatarUpload"
          >
            <img
              v-if="${className}Form.$column.javaField"
              :src="`${className}Form.$column.javaField`"
              class="avatar"
            />
            <i v-else class="el-icon-plus avatar-uploader-icon" />
          </el-upload>
        </el-form-item>
#elseif ($column.htmlType == 'file')
        <el-form-item label="$column.columnComment" prop="$column.javaField">
          <el-upload
            class="avatar-uploader"
            action="/api/upload"
            :show-file-list="false"
            :on-success="handleAvatarSuccess"
            :before-upload="beforeAvatarUpload"
          >
            <el-button size="small" type="primary">点击上传</el-button>
          </el-upload>
        </el-form-item>
#end
#end
#end
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button
            type="primary"
            @click="submitForm(${className}RuleFormRef)"
          >确 定</el-button>
          <el-button
            @click="close${ClassName}Dialog"
          >取 消</el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script lang="ts" setup>
import { onMounted, reactive, ref, toRefs } from 'vue'
import { FormInstance, FormRules } from 'element-plus'
import { Plus, Edit, Delete, Search, Refresh } from '@element-plus/icons-vue'
import { getProxy } from '@/utils/getCurrentInstance'
import { list$ClassName, get$ClassName, add$ClassName, edit$ClassName, delete$ClassName, delete${ClassName}s } from '@/api/$moduleName/$businessName'
import { $ClassName, ${ClassName}Form, ${ClassName}Query } from '@/api/$moduleName/$businessName/types'

const proxy = getProxy()
#if ($hasDictType)
const { $dictTypeVar } = proxy.$dict($dictTypeParams)
#end

const state = reactive({
  /** 遮罩层 */
  loading: false as boolean,
  /** 选中数据 */
  $primaryKey: 0 as number,
  /** 选中数据数组 */
  ${primaryKey}s: [] as number[],
  /** 总条数 */
  total: 0 as number,
  /** ${classComment}数据 */
  ${className}List: [] as ${ClassName}[],
  /** 查询参数 */
  queryParams: {
    pageNum: 1,
    pageSize: 10
  } as ${ClassName}Query,
  /** ${classComment}对话框 */
  ${className}Dialog: {
    title: '',
    type: '',
    visible: false
  } as Dialog,
  /** ${classComment}表单 */
  ${className}Form: {} as ${ClassName}Form
})

const {
  loading,
  ${primaryKey}s,
  total,
  ${className}List,
  queryParams,
  ${className}Dialog,
  ${className}Form
} = toRefs(state)

const ${className}RuleFormRef = ref<FormInstance>()
const ${className}QueryFormRef = ref<FormInstance>()
const ${className}Rules = reactive<FormRules>({
#foreach ($column in $columnList)
#if ($column.javaField != $primaryKey)
#if ($column.htmlType == 'checkbox')
  ${column.javaField}List: [
    { required: true, message: '${column.columnComment}不能为空', trigger: 'blur' },
  ],
#else
  $column.javaField: [
    { required: true, message: '${column.columnComment}不能为空', trigger: 'blur' },
  ],
#end
#end
#end
})

/**
 * 查询${classComment}列表
 */
const handleList = async () => {
  state.loading = true
  const res: any = await list${ClassName}(state.queryParams)
  state.${className}List = res.rows
  state.total = res.total
  state.loading = false
}

/**
 * 添加${classComment}信息
 */
const handleAdd = () => {
  state.${className}Form = {} as ${ClassName}Form

  state.${className}Dialog = {
    title: '新增${classComment}信息',
    type: 'add',
    visible: true
  }
}

/**
 * 修改${classComment}信息
 *
 * @param row ${classComment}信息
 */
const handleEdit = async (row: $ClassName) => {
  let $primaryKey = state.$primaryKey
  if (row.$primaryKey) {
    $primaryKey = row.$primaryKey
  }
  const res: any = await get${ClassName}($primaryKey)
  state.${className}Form = res.data

  state.${className}Dialog = {
    title: '修改${classComment}信息',
    type: 'edit',
    visible: true
  }
}

#set($dollar = '$')
/**
 * 删除${classComment}信息
 *
 * @param row ${classComment}信息
 */
const handleDelete = async (row: $ClassName) => {
  try {
    await proxy.$confirm('确认删除"' + row.$primaryKey + '"${classComment}信息吗？', '提示', {
      type: 'warning'
    })
    await delete${ClassName}(row.$primaryKey)
    proxy.${dollar}message.success('删除${classComment}信息成功')
    await handleList()
  } catch (error) {
    console.log(error)
  }
}

/**
 * 批量删除${classComment}信息
 */
const handleDeletes = async () => {
  try {
    await proxy.$confirm('确认删除"' + state.${primaryKey}s + '"${classComment}信息吗？', '提示', {
      type: 'warning'
    })
    await delete${ClassName}s(state.${primaryKey}s)
    proxy.${dollar}message.success('删除${classComment}信息成功')
    await handleList()
  } catch (error) {
    console.log(error)
  }
}

/**
 * 重置表单
 */
const resetQuery = async () => {
  ${className}QueryFormRef.value?.resetFields()
  await handleList()
}

/**
 * 关闭${classComment}对话框
 */
const close${ClassName}Dialog = () => {
  state.${className}Dialog.visible = false
  ${className}RuleFormRef.value?.clearValidate()
  ${className}RuleFormRef.value?.resetFields()
}

/**
 * 选中数据
 *
 * @param selection 选中数据
 */
const handleSelectionChange = (selection: ${ClassName}[]) => {
  state.${primaryKey}s = selection.map((item: $ClassName) => item.$primaryKey)
  if (selection.length === 1) {
    state.$primaryKey = ${primaryKey}s.value[0]
  }
}

/**
 * 提交表单
 *
 * @param formEl 表单实例
 */
const submitForm = async (formEl: FormInstance | undefined) => {
  if (!formEl) return
  try {
    await formEl.validate()
      if (${className}Dialog.value.type == 'add') {
        await add${ClassName}(state.${className}Form)
        proxy.${dollar}message.success('添加${classComment}信息成功')
        close${ClassName}Dialog()
        await handleList()
      }
      if (${className}Dialog.value.type == 'edit') {
        await edit${ClassName}(state.${className}Form)
        proxy.${dollar}message.success('修改${classComment}信息成功')
        close${ClassName}Dialog()
        await handleList()
      }
  } catch (error) {
    console.log('error submit!', error)
  }
}

onMounted(async () => {
  await handleList()
})
</script>

<style lang="scss" scoped>
</style>
